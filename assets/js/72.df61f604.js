(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{248:function(e,t,n){"use strict";n.r(t);var o=n(0),i=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"how-constellation-works"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#how-constellation-works","aria-hidden":"true"}},[e._v("â†³")]),e._v(" How Constellation works")]),e._v(" "),n("p",[e._v("Each Constellation node hosts some number of key pairs, and advertises\na publicly accessible FQDN/port for other hosts to connect to.")]),e._v(" "),n("p",[e._v("Nodes can be started with a reference to existing nodes on the network\n(with the "),n("code",[e._v("othernodes")]),e._v(" configuration variable,) or without, in which\ncase some other node must later be pointed to this node to achieve\nsynchronization.")]),e._v(" "),n("p",[e._v("When a node starts up, it will reach out to each node in "),n("code",[e._v("othernodes")]),e._v(",\nand learn about the public keys they host, as well as other nodes in\nthe network. In short order, the node's public key directory will be\nthe same as that of all other nodes, and you can start addressing\nmessages to any of the known public keys.")]),e._v(" "),n("p",[e._v("This is what happens when you use the "),n("code",[e._v("send")]),e._v(" function of the Private\nAPI to send the bytestring "),n("code",[e._v("foo")]),e._v(" to the public key\n"),n("code",[e._v("ROAZBWtSacxXQrOe3FGAqJDyJjFePR5ce4TSIzmJ0Bc=")]),e._v(":")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("You send a POST API request to the Private API socket like:\n"),n("code",[e._v('{"payload": "foo", "from": "mypublickey", to: "ROAZBWtSacxXQrOe3FGAqJDyJjFePR5ce4TSIzmJ0Bc="}')])])]),e._v(" "),n("li",[n("p",[e._v("The local node generates using "),n("code",[e._v("/dev/urandom")]),e._v(" (or similar):")]),e._v(" "),n("ul",[n("li",[e._v("A random Master Key (MK) and nonce")]),e._v(" "),n("li",[e._v("A random recipient nonce")])])]),e._v(" "),n("li",[n("p",[e._v("The local node encrypts the payload using NaCl "),n("code",[e._v("secretbox")]),e._v(" using\nthe random MK and nonce.")])]),e._v(" "),n("li",[n("p",[e._v("The local node generates an MK container for each recipient\npublic key; in this case, simply one container for "),n("code",[e._v("ROAZ...")]),e._v(",\nusing NaCl "),n("code",[e._v("box")]),e._v(" and the recipient nonce.")]),e._v(" "),n("p",[e._v("NaCl "),n("code",[e._v("box")]),e._v(" works by deriving a shared key based\non your private key and the recipient's public key. This is known\nas elliptic curve key agreement.")]),e._v(" "),n("p",[e._v("Note that the sender public key and recipient public key we\nspecified above aren't enough to perform the\nencryption. Therefore, the node will check to see that it is\nactually hosting the private key that corresponds to the given\npublic key before generating an MK container for each recipient\nbased on SharedKey(yourprivatekey, recipientpublickey) and the\nrecipient nonce.")]),e._v(" "),n("p",[e._v("We now have:")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("An encrypted payload which is "),n("code",[e._v("foo")]),e._v(" encrypted with the random\nMK and a random nonce. This is the same for all recipients.")])]),e._v(" "),n("li",[n("p",[e._v("A random recipient nonce that also is the same for all\nrecipients.")])]),e._v(" "),n("li",[n("p",[e._v("For each recipient, the MK encrypted with the\nshared key of your private key and their public key. This\nMK container is unique per recipient, and is only transmitted to\nthat recipient.")])])])]),e._v(" "),n("li",[n("p",[e._v("For each recipient, the local node looks up the recipient host,\nand transmits to it:")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("The sender's (your) public key")])]),e._v(" "),n("li",[n("p",[e._v("The encrypted payload and nonce")])]),e._v(" "),n("li",[n("p",[e._v("The MK container for that recipient and the recipient nonce")])])])]),e._v(" "),n("li",[n("p",[e._v("The recipient node returns a SHA3-512 hash digest of the\nencrypted payload, which represents its storage address.")]),e._v(" "),n("p",[e._v("(Note that it is not possible for the sender to dictate the\nstorage address. Every node generates it independently by hashing\nthe encrypted payload.)")])]),e._v(" "),n("li",[n("p",[e._v("The local node stores the payload locally, generating the same\nhash digest.")])]),e._v(" "),n("li",[n("p",[e._v("The API call returns successfully once all nodes have confirmed\nreceipt and storage of the payload, and returned a hash digest.")])])]),e._v(" "),n("p",[e._v("Now, through some other mechanism, you'll inform the recipient that\nthey have a payload waiting for them with the identifier "),n("code",[e._v("owqkrokwr")]),e._v(",\nand they will make a call to the "),n("code",[e._v("receive")]),e._v(" method of their Private\nAPI:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Make a call to the Private API socket "),n("code",[e._v("receive")]),e._v(" method:\n"),n("code",[e._v('{"key": "qrqwrqwr"}')])])]),e._v(" "),n("li",[n("p",[e._v("The local node will look in its storage for the key "),n("code",[e._v("qrqwrqwr")]),e._v(",\nand abort if it isn't found.")])]),e._v(" "),n("li",[n("p",[e._v("When found, the node will use the information about the sender as\nwell as its private key to derive SharedKey(senderpublickey,\nyourprivatekey) and decrypt the MK container using NaCl "),n("code",[e._v("box")]),e._v("\nwith the recipient nonce.")])]),e._v(" "),n("li",[n("p",[e._v("Using the decrypted MK, the local node will decrypt the encrypted\npayload using NaCl "),n("code",[e._v("secretbox")]),e._v(" using the main nonce.")])]),e._v(" "),n("li",[n("p",[e._v("The API call returns the decrypted data.")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);