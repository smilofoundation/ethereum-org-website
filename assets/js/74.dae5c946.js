(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{182:function(t,e,n){"use strict";n.r(e);var s=n(0),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#####")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Constellation configuration file example")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ----------------------------------------")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Every option listed here can also be specified on the command line, e.g.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## `constellation-node --url=http://www.foo.com --port 9001 ...`")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## (lists are given using comma-separated strings)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If both command line parameters and a configuration file are given, the")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## command line options will take precedence.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The only strictly necessary option is `port`, however it's recommended to")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## set at least the following:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   --url           The URL to advertise to other nodes (reachable by them)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   --port          The local port to listen on")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   --workdir       The folder to put stuff in (default: .)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   --socket        IPC socket to create for access to the Private API")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('##   --othernodes    "Boot nodes" to connect to to discover the network')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   --publickeys    Public keys hosted by this node")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   --privatekeys   Private keys hosted by this node (in corresponding order)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Example usage:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   constellation-node --workdir=data --generatekeys=foo")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   (To generate a keypair foo in the data directory)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   constellation-node --url=https://localhost:9000/ \\")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##                      --port=9000 \\")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##                      --workdir=data \\")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##                      --socket=constellation.ipc \\")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##                      --othernodes=https://localhost:9001/ \\")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##                      --publickeys=foo.pub \\")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##                      --privatekeys=foo.key")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   constellation-node sample.conf")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   constellation-node --port=9002 sample.conf")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   (This overrides the port value given in sample.conf)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Note on defaults: "Default:" below indicates the value that will be assumed')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## if the option is not present either in the configuration file or as a command")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## line parameter.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Note about security: In the default configuration, Constellation will")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## automatically generate TLS certificates and trust other nodes' certificates")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## when they're first encountered (trust-on-first-use). See the documentation")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## for tlsservertrust and tlsclienttrust below. To disable TLS entirely, e.g.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## when using Constellation in conjunction with a VPN like WireGuard, set tls to")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## off.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#####")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Externally accessible URL for this node's public API (this is what's")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## advertised to other nodes on the network, and must be reachable by them.)")]),t._v('\nurl = "http'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//127.0.0.1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v('9001/"\n\n'),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Port to listen on for the public API.")]),t._v("\nport = 9001\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Directory in which to put and look for other files referenced here.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: The current directory")]),t._v('\nworkdir = "data"\n\n'),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Socket file to use for the private API / IPC. If this is commented out,")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the private API will not be accessible.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: Not set")]),t._v('\nsocket = "constellation.ipc"\n\n'),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Initial (not necessarily complete) list of other nodes in the network.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Constellation will automatically connect to other nodes not in this list")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## that are advertised by the nodes below, thus these can be considered the")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## "boot nodes."')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: []")]),t._v("\nothernodes = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://127.0.0.1:9000/"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The set of public keys this node will host.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: []")]),t._v("\npublickeys = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo.pub"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The corresponding set of private keys. These must correspond to the public")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## keys listed above.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: []")]),t._v("\nprivatekeys = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo.key"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Optional comma-separated list of paths to public keys to add as recipients")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## for every transaction sent through this node, e.g. for backup purposes.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## These keys must be advertised by some Constellation node on the network, i.e.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## be in a node's publickeys/privatekeys lists.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: []")]),t._v("\nalwayssendto = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Optional file containing the passwords needed to unlock the given privatekeys")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## (the file should contain one password per line -- add an empty line if any")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## one key isn't locked.)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: Not set")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# passwords = "passwords"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Storage engine used to save payloads and related information. Options:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - bdb:path (BerkeleyDB)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - dir:path (Directory/file storage - can be used with e.g. FUSE-mounted")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     file systems.)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - leveldb:path (LevelDB - experimental)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - memory (Contents are cleared when Constellation exits)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - sqlite:path (SQLite - experimental)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Default: "dir:storage"')]),t._v('\nstorage = "dir'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v('storage"\n\n'),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Verbosity level (each level includes all prior levels)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - 0: Only fatal errors")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - 1: Warnings")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - 2: Informational messages")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - 3: Debug messages")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## At the command line this can be specified using -v0, -v1, -v2, -v3, or")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## -v (2) and -vv (3).")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 1")]),t._v("\nverbosity = 1\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Optional IP whitelist for the public API. If unspecified/empty,")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## connections from all sources will be allowed (but the private API remains")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## accessible only via the IPC socket above.) To allow connections from")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## localhost when a whitelist is defined, e.g. when running multiple")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Constellation nodes on the same machine, add "127.0.0.1" and "::1" to')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## this list.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: Not set")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# ipwhitelist = ["10.0.0.1", "2001:0db8:85a3:0000:0000:8a2e:0370:7334"]')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TLS status. Options:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - strict: All connections to and from this node must use TLS with mutual")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     authentication. See the documentation for tlsservertrust and")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     tlsclienttrust below.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - off: Mutually authenticated TLS is not used for in- and outbound")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     connections, although unauthenticated connections to HTTPS hosts are")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     still possible. This should only be used if another transport security")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     mechanism like WireGuard is in place.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Default: "strict"')]),t._v('\ntls = "strict"\n\n'),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path to a file containing the server's TLS certificate in Apache format.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This is used to identify this node to other nodes in the network when they")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## connect to the public API.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This file will be auto-generated if it doesn't exist.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Default: "tls-server-cert.pem"')]),t._v('\ntlsservercert = "tls'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('cert.pem"\n\n'),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## List of files that constitute the CA trust chain for the server certificate.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This can be empty for auto-generated/non-PKI-based certificates.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: []")]),t._v("\ntlsserverchain = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The private key file for the server TLS certificate.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This file will be auto-generated if it doesn't exist.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Default: "tls-server-key.pem"')]),t._v('\ntlsserverkey = "tls'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('key.pem"\n\n'),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TLS trust mode for the server. This decides who's allowed to connect to it.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Options:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - whitelist: Only nodes that have previously connected to this node and")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     been added to the tlsknownclients file below will be allowed to connect.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     This mode will not add any new clients to the tlsknownclients file.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - tofu: (Trust-on-first-use) Only the first node that connects identifying")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     as a certain host will be allowed to connect as the same host in the")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     future. Note that nodes identifying as other hosts will still be able")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     to connect -- switch to whitelist after populating the tlsknownclients")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     list to restrict access.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - ca: Only nodes with a valid certificate and chain of trust to one of")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     the system root certificates will be allowed to connect. The folder")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     containing trusted root certificates can be overriden with the")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     SYSTEM_CERTIFICATE_PATH environment variable.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - ca-or-tofu: A combination of ca and tofu: If a certificate is valid,")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     it is always allowed and added to the tlsknownclients list. If it is")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     self-signed, it will be allowed only if it's the first certificate this")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     node has seen for that host.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - insecure-no-validation: Any client can connect, however they will still")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     be added to the tlsknownclients file.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Default: "tofu"')]),t._v('\ntlsservertrust = "tofu"\n\n'),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TLS known clients file for the server. This contains the fingerprints of")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## public keys of other nodes that are allowed to connect to this one.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Default: "tls-known-clients"')]),t._v('\ntlsknownclients = "tls'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("known"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('clients"\n\n'),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path to a file containing the client's TLS certificate in Apache format.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This is used to identify this node to other nodes in the network when it is")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## connecting to their public APIs.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This file will be auto-generated if it doesn't exist.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Default: "tls-client-cert.pem"')]),t._v('\ntlsclientcert = "tls'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('cert.pem"\n\n'),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## List of files that constitute the CA trust chain for the client certificate.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This can be empty for auto-generated/non-PKI-based certificates.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: []")]),t._v("\ntlsclientchain = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The private key file for the client TLS certificate.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This file will be auto-generated if it doesn't exist.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Default: "tls-client-key.pem"')]),t._v('\ntlsclientkey = "tls'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('key.pem"\n\n'),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TLS trust mode for the client. This decides which servers it will connect to.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Options:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - whitelist: This node will only connect to servers it has previously seen")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     and added to the tlsknownclients file below. This mode will not add")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     any new servers to the tlsknownservers file.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - tofu: (Trust-on-first-use) This node will only connect to the same")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     server for any given host. (Similar to how OpenSSH works.)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - ca: The node will only connect to servers with a valid certificate and")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     chain of trust to one of the system root certificates. The folder")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     containing trusted root certificates can be overriden with the")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     SYSTEM_CERTIFICATE_PATH environment variable.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - ca-or-tofu: A combination of ca and tofu: If a certificate is valid,")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     it is always allowed and added to the tlsknownservers list. If it is")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     self-signed, it will be allowed only if it's the first certificate this")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     node has seen for that host.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - insecure-no-validation: This node will connect to any server, regardless")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     of certificate, however it will still be added to the tlsknownservers")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##     file.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Default: "ca-or-tofu"')]),t._v('\ntlsclienttrust = "ca'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("or"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('tofu"\n\n'),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TLS known servers file for the client. This contains the fingerprints of")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## public keys of other nodes that this node has encountered.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Default: "tls-known-servers"')]),t._v('\ntlsknownservers = "tls'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("known"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('servers"\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);