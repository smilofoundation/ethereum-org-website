(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{216:function(e,t,r){"use strict";r.r(t);var a=r(0),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"interface-details"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#interface-details","aria-hidden":"true"}},[e._v("↳")]),e._v(" Interface Details")]),e._v(" "),r("p",[e._v("All interfaces can be set to run over HTTP, GRPC or HTTP-over-Unix-Sockets.")]),e._v(" "),r("h3",{attrs:{id:"grpc-for-inter-node-communication-deprecated"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#grpc-for-inter-node-communication-deprecated","aria-hidden":"true"}},[e._v("↳")]),e._v(" gRPC for inter-node communication (Deprecated)")]),e._v(" "),r("p",[e._v("We currently have an implementation of gRPC for peer node communication as experiment API. This is not enabled on Smilo yet, but between Tessera nodes they can be enabled by adding in a couple of properties in the configuration file as child elements of "),r("code",[e._v("serverConfig")]),e._v(".")]),e._v(" "),r("ul",[r("li",[r("p",[r("code",[e._v("grpcPort")]),e._v(" - when this value is specified, Tessera node will start a gRPC server listening on this port. The normal "),r("code",[e._v("port")]),e._v(" value would still be used for starting REST server.")])]),e._v(" "),r("li",[r("p",[r("code",[e._v("communicationType")]),e._v(" - possible values are "),r("code",[e._v("REST")]),e._v(", "),r("code",[e._v("GRPC")]),e._v(". Default value is "),r("code",[e._v("REST")]),e._v(".")])])]),e._v(" "),r("p",[e._v("Please note that communication between Smilo and Tessera are still via unix socket. This communication flag provides additional options for Tessera peer-to-peer communication. If gRPC is the option specified, please ensure the peers urls are provided with the appropriate ports.")]),e._v(" "),r("p",[e._v("!!! info\ngRPC as a protocol for peer-to-peer communication will be removed from Tessera version 0.10.2")]),e._v(" "),r("hr"),e._v(" "),r("h3",{attrs:{id:"tessera-to-tessera-public-api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tessera-to-tessera-public-api","aria-hidden":"true"}},[e._v("↳")]),e._v(" Tessera to Tessera - Public API")]),e._v(" "),r("p",[e._v("Tessera nodes communicate with each other for:")]),e._v(" "),r("ul",[r("li",[e._v("Node/network discovery")]),e._v(" "),r("li",[e._v("Sending/Receiving encrypted payloads")])]),e._v(" "),r("p",[e._v("The following endpoints are advertised on this interface:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("/version")])]),e._v(" "),r("li",[r("code",[e._v("/upcheck")])]),e._v(" "),r("li",[r("code",[e._v("/push")])]),e._v(" "),r("li",[r("code",[e._v("/resend")])]),e._v(" "),r("li",[r("code",[e._v("/partyinfo")])]),e._v(" "),r("li",[r("code",[e._v("/partyinfo/validate")])])]),e._v(" "),r("h3",{attrs:{id:"third-party-public-api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#third-party-public-api","aria-hidden":"true"}},[e._v("↳")]),e._v(" Third Party - Public API")]),e._v(" "),r("p",[e._v("Tessera nodes communicate with third parties for:")]),e._v(" "),r("ul",[r("li",[e._v("storing encrypted payloads for external applications")])]),e._v(" "),r("p",[e._v("The following endpoints are advertised on this interface:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("/version")])]),e._v(" "),r("li",[r("code",[e._v("/upcheck")])]),e._v(" "),r("li",[r("code",[e._v("/storeraw")])]),e._v(" "),r("li",[r("code",[e._v("/keys")])]),e._v(" "),r("li",[r("code",[e._v("/partyinfo/keys")])])]),e._v(" "),r("h3",{attrs:{id:"smilo-to-tessera-private-api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#smilo-to-tessera-private-api","aria-hidden":"true"}},[e._v("↳")]),e._v(" Smilo to Tessera - Private API")]),e._v(" "),r("p",[e._v("Smilo uses this API to:")]),e._v(" "),r("ul",[r("li",[e._v("Check if the local Tessera node is running")]),e._v(" "),r("li",[e._v("Send and receive details of private transactions")])]),e._v(" "),r("p",[e._v("The following endpoints are advertised on this interface:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("/version")])]),e._v(" "),r("li",[r("code",[e._v("/upcheck")])]),e._v(" "),r("li",[r("code",[e._v("/sendraw")])]),e._v(" "),r("li",[r("code",[e._v("/send")])]),e._v(" "),r("li",[r("code",[e._v("/receiveraw")])]),e._v(" "),r("li",[r("code",[e._v("/receive")])]),e._v(" "),r("li",[r("code",[e._v("/storeraw")])]),e._v(" "),r("li",[r("code",[e._v("/sendsignedtx")])]),e._v(" "),r("li",[r("code",[e._v("/transaction/{key}/isSender")])]),e._v(" "),r("li",[r("code",[e._v("/transaction/{key}/participants")])])]),e._v(" "),r("h3",{attrs:{id:"admin-api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#admin-api","aria-hidden":"true"}},[e._v("↳")]),e._v(" Admin API")]),e._v(" "),r("p",[e._v("Admins should use this API to:")]),e._v(" "),r("ul",[r("li",[e._v("Access information about the Tessera node")]),e._v(" "),r("li",[e._v("Make changes to the configuration of the Tessera node")])]),e._v(" "),r("p",[e._v("The following endpoints are advertised on this API:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("/peers")]),e._v(" - Add to, and retrieve from, the Tessera node's peers list")])]),e._v(" "),r("h2",{attrs:{id:"api-details"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#api-details","aria-hidden":"true"}},[e._v("↳")]),e._v(" API Details")]),e._v(" "),r("p",[r("strong",[r("code",[e._v("version")])]),e._v(" - "),r("em",[e._v("Get Tessera version")])]),e._v(" "),r("ul",[r("li",[e._v("Returns the version of Tessera that is running.")])]),e._v(" "),r("p",[r("strong",[r("code",[e._v("upcheck")])]),e._v(" - "),r("em",[e._v("Check Tessera node is running")])]),e._v(" "),r("ul",[r("li",[e._v('Returns the text "I\'m up!"')])]),e._v(" "),r("p",[r("strong",[r("code",[e._v("push")])]),e._v(" - "),r("em",[e._v("Push transactions between nodes")])]),e._v(" "),r("ul",[r("li",[e._v("Persist encrypted payload received from another node.")])]),e._v(" "),r("p",[r("strong",[r("code",[e._v("resend")])]),e._v(" - "),r("em",[e._v("Resend transaction")])]),e._v(" "),r("ul",[r("li",[e._v("Resend all transactions for given key or given hash/recipient.")])]),e._v(" "),r("p",[r("strong",[r("code",[e._v("partyinfo")])]),e._v(" - "),r("em",[e._v("Retrieve details of known nodes")])]),e._v(" "),r("ul",[r("li",[e._v("GET: Request public keys/url of all known peer nodes.")]),e._v(" "),r("li",[e._v("POST: accepts a stream that contains the caller node's network information, and returns a merged copy with the callee node's network information")])]),e._v(" "),r("p",[r("strong",[r("code",[e._v("partyinfo/validate")])]),e._v(" - "),r("em",[e._v("Validates a node possesses a key")])]),e._v(" "),r("ul",[r("li",[e._v("Will request a node to decrypt a transaction in order to prove that it has access to the private part of its advertised public key.")])]),e._v(" "),r("p",[r("strong",[r("code",[e._v("sendraw")])]),e._v(" - "),r("em",[e._v("Send transaction bytestring")])]),e._v(" "),r("ul",[r("li",[e._v("Send transaction payload bytestring from Smilo to Tessera node. Tessera sends the transaction hash in the response back.")])]),e._v(" "),r("p",[r("strong",[r("code",[e._v("send")])]),e._v(" - "),r("em",[e._v("Send transaction bytestring")])]),e._v(" "),r("ul",[r("li",[e._v("Similar to sendraw however request payload is in json format. Please see our "),r("a",{attrs:{href:"https://smilofoundation.github.io/tessera-swagger/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Swagger documentation"),r("OutboundLink")],1),e._v(" for object model.")])]),e._v(" "),r("p",[r("strong",[r("code",[e._v("storeraw")])]),e._v(" - "),r("em",[e._v("Store transaction bytestring")])]),e._v(" "),r("ul",[r("li",[e._v("Store transaction bytestring from a third party to Tessera node. Tessera sends the transaction hash in the response back.")])]),e._v(" "),r("p",[r("strong",[r("code",[e._v("sendsignedtx")])]),e._v(" - "),r("em",[e._v("Distribute signed transaction payload")])]),e._v(" "),r("ul",[r("li",[e._v("Send transaction payload identified by hash (returned by storeraw) from Smilo to Tessera node. Tessera sends the transaction hash in the response back.")])]),e._v(" "),r("p",[r("strong",[r("code",[e._v("receiveraw")])]),e._v(" - "),r("em",[e._v("Receive transaction bytestring")])]),e._v(" "),r("ul",[r("li",[e._v("Receive decrypted bytestring of the transaction payload from Tessera to Smilo for transactions it is party to.")])]),e._v(" "),r("p",[r("strong",[r("code",[e._v("receive")])]),e._v(" - "),r("em",[e._v("Receive transaction bytestring")])]),e._v(" "),r("ul",[r("li",[e._v("Similar to receiveraw however request payload is in json format. Please see our "),r("a",{attrs:{href:"https://smilofoundation.github.io/tessera-swagger/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Swagger documentation"),r("OutboundLink")],1),e._v(" for object model.")])]),e._v(" "),r("p",[r("strong",[r("code",[e._v("delete")])]),e._v(" - "),r("em",[e._v("Delete a transaction")])]),e._v(" "),r("ul",[r("li",[e._v("Delete hashed encrypted payload stored in Tessera nodes.")])]),e._v(" "),r("p",[r("strong",[r("code",[e._v("/transaction/{key}/isSender")])]),e._v(" - "),r("em",[e._v("Determine if a node is the sender")])]),e._v(" "),r("ul",[r("li",[e._v("Tell if the local enclave is the sender of a particular transaction (by checking if the sender public key is part of the nodes enclave)")])]),e._v(" "),r("p",[r("strong",[r("code",[e._v("/transaction/{key}/participants")])]),e._v(" - "),r("em",[e._v("Retrieve participants")])]),e._v(" "),r("ul",[r("li",[e._v("Retrieve transaction participants directly from the database (a recipient will have no participants)")])]),e._v(" "),r("p",[e._v("For more interactions with the API see the "),r("a",{attrs:{href:"https://smilofoundation.github.io/tessera-swagger/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Swagger documentation"),r("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=i.exports}}]);